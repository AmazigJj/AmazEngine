layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;
// Based on https://github.com/Angelo1211/HybridRenderingEngine/blob/master/assets/shaders/ComputeShaders/clusterShader.comp
//			(http://www.aortiz.me/2018/12/21/CG.html#building-a-cluster-grid)


layout (push_constant) uniform CameraBuffer {
	mat4 inverseMatrix;
	float zNear, zFar;
} camData;


//Output
struct Cluster {   // A cluster volume is represented using an AABB
   vec3 minPoint;
   vec3 maxPoint;
}

layout(std140,set = 0, binding = 0) buffer ClusterBuffer {
	Cluster objects[];
} clusters;


vec4 screenToView(vec4 screen, mat4 inverseProjection);
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance);

void main() {
	const vec3 eyePos = vec3(0.0);
	int clusterIndex =	(gl_GlobalInvocationID.x) + 
						(gl_GlobalInvocationID.y * 16) + 
						(gl_GlobalInvocationID.z * 16 * 8);

	vec3 clusterPos = vec3(	gl_GlobalInvocationID.x / 16,
							gl_GlobalInvocationID.y / 8,
							gl_GlobalInvocationID.z / 24);

	vec3 clusterMin = clusterPos;
	vec3 clusterMax = clusterPos + vec3(1/16, 1/8, 1/24);

	vec3 minPoint = screenToView(vec4(clusterMin.xy, -1.0, 1.0), camData.inverseMatrix).xyz;
	vec3 maxPoint = screenToView(vec4(clusterMax.xy, -1.0, 1.0), camData.inverseMatrix).xyz;

	float tileNear  = -camData.zNear * pow(camData.zFar/camData.zNear, clusterMin.z/24.0);
    float tileFar   = -camData.zNear * pow(camData.zFar/camData.zNear, clusterMax.z/24.0);

	vec3 minPointNear = lineIntersectionToZPlane(eyePos, minPoint, tileNear);
    vec3 minPointFar  = lineIntersectionToZPlane(eyePos, minPoint, tileFar);
    vec3 maxPointNear = lineIntersectionToZPlane(eyePos, maxPoint, tileNear);
    vec3 maxPointFar  = lineIntersectionToZPlane(eyePos, maxPoint, tileFar);

	vec3 minPointAABB = min(min(minPointNear, minPointFar),min(maxPointNear, maxPointFar));
    vec3 maxPointAABB = max(max(minPointNear, minPointFar),max(maxPointNear, maxPointFar));

	clusters[clusterIndex].minPoint  = vec4(minPointAABB , 0.0);
    clusters[clusterIndex].maxPoint  = vec4(maxPointAABB , 0.0);
}

//Changes a points coordinate system from screen space to view space
vec4 screenToView(vec4 screen, mat4 inverseProjection){

    //Convert to clipSpace
    vec4 clip = vec4(vec2(screen.x, 1.0 - screen.y)* 2.0 - 1.0, screen.z, screen.w);

    //View space transform
    vec4 view = inverseProjection * clip;

    //Perspective projection
    view = view / view.w;

    return view;
}

//Creates a line segment from the eye to the screen point, then finds its intersection
//With a z oriented plane located at the given distance to the origin
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance){

    //all clusters planes are aligned in the same z direction
    vec3 normal = vec3(0.0, 0.0, 1.0);

    //getting the line from the eye to the tile
    vec3 ab =  B - A;

    //Computing the intersection length for the line and the plane
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);

    //Computing the actual xyz position of the point along the line
    vec3 result = A + t * ab;

    return result;
}